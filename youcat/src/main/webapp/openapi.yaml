openapi: 3.0.1
info:
  title: user-managed TAP service (youcat)
  description: "This page contains technical API information.\n\nThis service implements\
    \ the IVOA <a href=\"http://www.ivoa.net/documents/TAP/20190927/\">TAP-1.1</a>\
    \ Recommendation plus extensions to support table creation and bulk loading of\
    \ content.\n\nThe endpoints listed below support both anonymous and authenticated\
    \ access (using client certificate or cookie).\n\n YouCat supports user management\
    \ of permissions at both the schema and table level. A schema owner is set when\
    \ a YouCat allocation is created by the service operator.  Table owners are set\
    \ to be the user who created the table.  Owners can set a flag for anonymous reading\
    \ and can set groups for read-only and read-write permissons.\n The following\
    \ describes how the permissions are enforced on schemas and tables:\n\n \t{schema|table}.public\
    \ = false|true\n \t\tallows querying via TAP API\n \t{schema|table|.read-only\
    \ = NULL | {group URI}\n \t\tread-only permission on a schema: allows TAP API\
    \ to expose table\n \t\tread-only permission on table: allows TAP API  to expose\
    \ content of a table\n \t{schema|table}.read-write = NULL | {group URI}\n \t\t\
    read-write permissions on a schema: read-only + create table\n \t\tread-write\
    \ permission on a table: read-only + create index, append rows, update (tap_schema)\
    \ metadata\n \t{schema|table}.owner\n \t\towner of a schema has: read-write +\
    \ drop (any) table\n \t\towner of a table has: read-write + drop table\n \t\t\
    owner of a schema: change permissions on schema and all tables\n \t\towner of\
    \ a table: change permissions on table\n\nGroup URIs are in the format:\n\n \t\
    {resourceID?{groupName}\n\nwhere {resourceID} is a registered GMS service and \
    {groupName} is a group managed by that service (e.g. ivo://example.net/gms?my-group."
  version: "1.0"
servers:
- url: /youcat
paths:
  /async:
    post:
      tags:
      - TAP
      summary: IVOA TAP v1.1
      description: |
        TAP asynchronous query endpoint (create UWS Job)
      parameters:
      - name: LANG
        in: query
        description: specify the query language used in the QUERY parameter
        required: true
        schema:
          type: string
      - name: QUERY
        in: query
        description: specify the query
        required: true
        schema:
          type: string
      - name: FORMAT
        in: query
        description: "supported for backwards compatibility to 1.0 (see: RESPONSEFORMAT)"
        schema:
          type: string
      - name: RESPONSEFORMAT
        in: query
        description: select output table format
        schema:
          type: string
      - name: MAXREC
        in: query
        description: request a specific limit on number of rows to return
        schema:
          type: integer
          format: int64
      - name: DEST
        in: query
        description: specify destination where output should be written (VOSpace URI)
        schema:
          type: string
          format: uri
      - name: UPLOAD
        in: query
        description: "specify name,location pair for a table to be uploaded and used\
          \ in the query"
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content: {}
        "303":
          description: standard UWS redirect to the created job
          content: {}
        "401":
          description: Unauthorized - User not authenticated
          content: {}
        "403":
          description: Permission Denied - Table(s) not readable
          content: {}
        "404":
          description: Not Found - Table(s) not found
          content: {}
        "500":
          description: Internal error
          content: {}
        "503":
          description: Service busy
          content: {}
        default:
          description: Unexpeced error
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /sync:
    get:
      tags:
      - TAP
      summary: IVOA TAP v1.1
      description: |
        TAP synchronous query endpoint
      parameters:
      - name: LANG
        in: query
        description: specify the query language used in the QUERY parameter
        required: true
        schema:
          type: string
      - name: QUERY
        in: query
        description: specify the query
        required: true
        schema:
          type: string
      - name: FORMAT
        in: query
        description: "supported for backwards compatibility to 1.0 (see: RESPONSEFORMAT)"
        schema:
          type: string
      - name: RESPONSEFORMAT
        in: query
        description: select output table format
        schema:
          type: string
      - name: MAXREC
        in: query
        description: request a specific limit on number of rows to return
        schema:
          type: integer
          format: int64
      - name: UPLOAD
        in: query
        description: "specify name,location pair for a table to be uploaded and used\
          \ in the query"
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content: {}
        "401":
          description: Unauthorized - User not authenticated
          content: {}
        "403":
          description: Permission Denied - Table(s) not readable
          content: {}
        "404":
          description: Not Found - Table(s) not found
          content: {}
        "500":
          description: Internal error
          content: {}
        "503":
          description: Service busy
          content: {}
        default:
          description: Unexpeced error
          content:
            application/x-votable+/xml:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - TAP
      summary: IVOA TAP v1.1
      description: |
        TAP synchronous query endpoint
      parameters:
      - name: LANG
        in: query
        description: specify the query language used in the QUERY parameter
        required: true
        schema:
          type: string
      - name: QUERY
        in: query
        description: specify the query
        required: true
        schema:
          type: string
      - name: FORMAT
        in: query
        description: "supported for backwards compatibility to 1.0 (see: RESPONSEFORMAT)"
        schema:
          type: string
      - name: RESPONSEFORMAT
        in: query
        description: select output table format
        schema:
          type: string
      - name: MAXREC
        in: query
        description: request a specific limit on number of rows to return
        schema:
          type: integer
          format: int64
      - name: UPLOAD
        in: query
        description: "specify name,location pair for a table to be uploaded and used\
          \ in the query"
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content: {}
        "401":
          description: Unauthorized - User not authenticated
          content: {}
        "403":
          description: Permission denied - Table(s) not readable
          content: {}
        "404":
          description: Not Found - Table(s) not found
          content: {}
        "500":
          description: Internal error
          content: {}
        "503":
          description: Service busy
          content: {}
        default:
          description: Unexpeced error
          content:
            application/x-votable+/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /availability:
    get:
      tags:
      - Support Interfaces
      summary: VOSI Availability
      description: "Indicates whether the service is operable and shows the reliability\
        \ of the service for extended and scheduled requests. If the query parameter\
        \ 'detail=min' is used, a light weight heart beat test will be performed.\
        \ The heart beat test returns status 200 if the service is available."
      parameters:
      - name: detail
        in: query
        description: "specifies heart beat to be used to check for availability of\
          \ this service, the value 'min' must be used, otherwise the full availability\
          \ test will be performed"
        schema:
          type: string
      responses:
        "200":
          description: A VOSI availability document in XML.
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/availability'
        default:
          description: Unexpected error
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /capabilities:
    get:
      tags:
      - Support Interfaces
      summary: VOSI Capabilities
      description: "Provides the service metadata in the form of a list of Capability\
        \ descriptions.  Each of these descriptions is an \nXML element that:\n<ul>\n\
        <li>states that the service provides a particular, IVOA-standard function;</li>\n\
        <li>lists the interfaces for invoking that function;</li>\n<li>records any\
        \ details of the implementation of the function that are not defined as default\
        \ or constant in the standard for that function.</li>\n</ul>\n"
      responses:
        "200":
          description: A VOSI Capabilities document in XML.
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/capabilities'
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Service too busy
          content: {}
        default:
          description: Unexpected error
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /tables:
    get:
      tags:
      - Support Interfaces
      summary: VOSI Tables
      description: |
        Provides the table metadata in the form of a TableSet descriptions.
      responses:
        "200":
          description: A VOSI <tableset> document in XML.
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/tables'
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Service too busy
          content: {}
        default:
          description: Unexpected error
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /tables/{name}:
    get:
      tags:
      - Support Interfaces
      summary: get table metadata (VOSI)
      description: |
        Provides the table metadata for a single table.
      parameters:
      - name: name
        in: path
        description: a single fully qualified table name (e.g. tap_schema.tables)
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A VOSI <table> document in XML.
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/tables'
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Service too busy
          content: {}
        default:
          description: Unexpected error
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - Custom Features
      summary: create table
      description: |
        table description in VOSI table or VOTable (no rows) format
      parameters:
      - name: name
        in: path
        description: |
          the fully qualified name of the table to create
        required: true
        schema:
          type: string
      responses:
        "201":
          description: table created
          content: {}
        "400":
          description: create table failed due to invalid input
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Service too busy
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - Custom Features
      summary: drop table
      parameters:
      - name: name
        in: path
        description: the table to drop
        required: true
        schema:
          type: string
      responses:
        "200":
          description: table dropped
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Service too busy
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /permissions/{name}:
    get:
      tags:
      - Custom Features
      summary: view schema or table permissions
      description: |
        View the owner, public flag, read group, and write group of a schema or table.
      parameters:
      - name: name
        in: path
        description: name of the schema or table to view.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful request
          content: {}
        "400":
          description: invalid syntax
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Service too busy
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - Custom Features
      summary: modify schema or table permissions
      description: |
        Modify any of the public flag, readGroup or writeGroup of a schema or table.  These operations are permitted by the owner of the schema and owners of the target tables.  Parameters are in-line CFLF separated entries in key=value format.  An example of a groupURI is ivo://cadc.nrc.ca/gms?myGroup
      parameters:
      - name: name
        in: path
        description: name of the schema or table to modify.
        required: true
        schema:
          type: string
      requestBody:
        description: set or clear read/write group.  rw-group=groupURI or rw-group=
          to clear.  group URI in format ivo://cadc.nrc.ca/gms?groupName
        content:
          text/plain: {}
        required: false
      responses:
        "200":
          description: permissions updated successfully
          content: {}
        "400":
          description: invalid permission syntax
          content: {}
        "403":
          description: Insufficient permission to change permissions
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Service too busy
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: rw-group
  /load/{tableName}:
    post:
      tags:
      - Custom Features
      summary: sync streaming row insert
      description: |
        Bulk load rows and append to the table. This currently supports input data in CSV and TSV format (with header), and FITS Binary Tables
      parameters:
      - name: tableName
        in: path
        description: a single fully qualified table name (e.g. tap_schema.tables)
        required: true
        schema:
          type: string
      responses:
        "200":
          description: rows successfully inserted
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tables'
        "400":
          description: insert rows failed due to invalid input
          content: {}
        "500":
          description: Internal server error
          content: {}
        "503":
          description: Service too busy
          content: {}
        default:
          description: Unexpected error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /table-update:
    post:
      tags:
      - Custom Features
      summary: async table update (create UWS Job)
      description: Asynchronous table update currently update supports index creation.
        In future it will also support loading content (rows) from a remote location
        (URI)
      parameters:
      - name: TABLE
        in: query
        description: "the table to update (TABLE={table name}): fully-qualified name\
          \ of the table to update"
        required: true
        schema:
          type: string
      - name: INDEX
        in: query
        description: "index a column (INDEX={column name}): value is the name of the\
          \ column to index; currently limited to single column only"
        required: true
        schema:
          type: string
      - name: UNIQUE
        in: query
        description: "create unique index (UNIQUE=true): use with INDEX={column name}\
          \ to make a unique index (default: false)"
        schema:
          type: boolean
      responses:
        "200":
          description: Successful response
          content: {}
        "303":
          description: standard UWS redirect to the created job
          content: {}
        "401":
          description: Unauthorized - User not authenticated
          content: {}
        "404":
          description: Not Found - User not found
          content: {}
        "500":
          description: Internal error
          content: {}
        "503":
          description: Service busy
          content: {}
        default:
          description: Unexpeced error
          content:
            text/xml:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Job:
      type: string
    availability:
      type: object
      properties:
        available:
          type: boolean
          xml:
            prefix: vosi
            attribute: true
        note:
          type: string
          xml:
            prefix: vosi
            attribute: true
      xml:
        name: availability
        namespace: http://www.ivoa.net/xml/VOSIAvailability/v1.0
        prefix: vosi
    tables:
      type: object
      properties:
        available:
          type: boolean
          xml:
            prefix: vosi
            attribute: true
        note:
          type: string
          xml:
            prefix: vosi
            attribute: true
      xml:
        namespace: http://www.ivoa.net/xml/VOSITables/v1.0
        prefix: vosi
    capabilities:
      type: object
      xml:
        namespace: http://www.ivoa.net/xml/VOSICapabilities/v1.0
        prefix: vosi
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

